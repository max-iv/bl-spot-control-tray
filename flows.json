[
    {
        "id": "7cbe116050851432",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Chill Detector",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "79250bf3.365cc4",
        "type": "mqtt-broker",
        "name": "MQTT Broker",
        "broker": "$(MQTTSERVERIP)",
        "port": "1883",
        "clientid": "$(MQTTCLIENTID)",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "autoUnsubscribe": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "08ee1fafdc4c41fc",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Save tray config in Memory",
        "func": "let tray = msg.payload;\nflow.set('tray', msg.payload);\ntray.trayControl.value = 0;\ntray.watchdog.value = 0;\ntray.controlState.value = 0;\nreturn {topic: 'setting', payload:{'cube':'trayControl', value:tray.trayControl.value}};\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 880,
        "y": 400,
        "wires": [
            [
                "e6028ca70b6042d8"
            ]
        ]
    },
    {
        "id": "6a3a1d38244800c1",
        "type": "inject",
        "z": "7cbe116050851432",
        "name": "initFlow",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "initFlow",
        "payload": "",
        "payloadType": "date",
        "x": 140,
        "y": 100,
        "wires": [
            [
                "33783d686e432aad"
            ]
        ]
    },
    {
        "id": "33783d686e432aad",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Init flow Variables",
        "func": "var trayProps = {\n    box         :   env.get(\"BOX\"),\n    type        :   env.get(\"TRAYTYPE\"),\n    name        :   env.get(\"TRAYNAME\"),\n};\nflow.set('trayProps',trayProps);\nflow.set('settingInProgress', false);\nflow.set('tray', null);\nflow.set('picameraTray', null);\nflow.set('motorTray', null);\nreturn {topic: \"getTrayProps\", payload: true};  \n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 330,
        "y": 100,
        "wires": [
            [
                "a1ac9e631b1c38ed",
                "4d6715a3cd96c25c"
            ]
        ]
    },
    {
        "id": "b15d260b572e07f4",
        "type": "json",
        "z": "7cbe116050851432",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 330,
        "y": 300,
        "wires": [
            [
                "8fe938b67af54824"
            ]
        ]
    },
    {
        "id": "ffa001cd11b3750b",
        "type": "switch",
        "z": "7cbe116050851432",
        "name": "",
        "property": "topic",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "setting",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "ping",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "config",
                "vt": "str"
            },
            {
                "t": "eq",
                "v": "echo",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 670,
        "y": 300,
        "wires": [
            [
                "b4c6e205db41e3e1"
            ],
            [
                "4cedc086c72eda01"
            ],
            [
                "b3fee75bbe3e5d31"
            ],
            [
                "08ee1fafdc4c41fc"
            ]
        ]
    },
    {
        "id": "8fe938b67af54824",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Filter MQTT",
        "func": "return {topic:msg.topic.split('/')[5], payload:msg.payload};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 300,
        "wires": [
            [
                "ffa001cd11b3750b"
            ]
        ]
    },
    {
        "id": "719cafd457722095",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = flow.get('tray');\nif (tray == null) return null;\nlet newMsg = null;\nlet newMsgTopic = flow.get('trayProps').box + '/tray/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/reading';\nswitch( tray.trayControl.value)\n{\n    case 0:\n        newMsg = {topic: newMsgTopic, payload: JSON.stringify(tray)};\n        break;\n    case -1:\n        tray.trayControl.value = 1;\n        newMsg = {topic: newMsgTopic, payload: JSON.stringify(tray)};\n        break;\n    default:\n        break;\n}\nreturn newMsg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1490,
        "y": 300,
        "wires": [
            [
                "81831015c91a5f28"
            ]
        ]
    },
    {
        "id": "b3fee75bbe3e5d31",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Save config file",
        "func": "let cubeAlarm = flow.get('tray')[msg.payload.cube].alarm;\ncubeAlarm.limits.lolo = msg.payload.limits.lolo;\ncubeAlarm.limits.low  = msg.payload.limits.low;\ncubeAlarm.limits.high = msg.payload.limits.high;\ncubeAlarm.limits.hihi = msg.payload.limits.hihi;\ncubeAlarm.notify.name = msg.payload.notify.name;\ncubeAlarm.notify.number = msg.payload.notify.number;\nreturn {topic:'newData', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 360,
        "wires": [
            [
                "8f466a48843f0a7f"
            ]
        ]
    },
    {
        "id": "fa4e7b3501c0222d",
        "type": "inject",
        "z": "7cbe116050851432",
        "name": "Archive clock",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "20",
        "topic": "archiveClock",
        "payloadType": "date",
        "x": 160,
        "y": 500,
        "wires": [
            [
                "3de75371898f354c"
            ]
        ]
    },
    {
        "id": "3de75371898f354c",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Archive Pulse",
        "func": "var tray = flow.get('tray');\nif (tray == null) return null;\nvar lastArchive = context.get('lastArchive');\nvar now = new Date().getTime();\nif ((now - lastArchive) <= tray.arcPeriod) return null;\ncontext.set('lastArchive', now);\nreturn {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 370,
        "y": 500,
        "wires": [
            [
                "2eb80f1e7b1fcecd"
            ]
        ]
    },
    {
        "id": "eeba3f6f8a8a9a65",
        "type": "inject",
        "z": "7cbe116050851432",
        "name": "Archive now",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "archiveNow",
        "payloadType": "date",
        "x": 150,
        "y": 560,
        "wires": [
            [
                "10a1af89d539377a"
            ]
        ]
    },
    {
        "id": "10a1af89d539377a",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Single Archive Pulse",
        "func": "return {topic:'archivePulse', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastArchive', new Date().getTime());",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 560,
        "wires": [
            [
                "2eb80f1e7b1fcecd"
            ]
        ]
    },
    {
        "id": "2eb80f1e7b1fcecd",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Publish tray",
        "func": "if (!msg.payload) return null;\nvar tray = flow.get('tray');\nif (tray == null) return null;\nvar newMsg = \n{\n    topic: flow.get('trayProps').box + '/tray/' + flow.get('trayProps').type + '/' + flow.get('trayProps').name + '/archive',\n    payload: JSON.stringify(tray)\n};\nreturn  newMsg;  \n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 500,
        "wires": [
            [
                "5de5dfce91a29ad6"
            ]
        ]
    },
    {
        "id": "b4c6e205db41e3e1",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Create Setting",
        "func": "let customSettingMsg = null;\nlet normalSettingMsg = null;\nlet trayControlMessage = null;\nlet tray = flow.get('tray');\nif (tray == null) return [customSettingMsg,normalSettingMsg,trayControlMessage];\n\nswitch (msg.payload.cube) \n{\n    case 'alias':\n        if (tray.controlState.value == 0) tray.alias.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: true };\n       break;\n    case 'picameraMQTT':\n        if (tray.controlState.value == 0) tray.picameraMQTT.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: true };\n       break;\n    case 'motorMQTT':\n        if (tray.controlState.value == 0) tray.motorMQTT.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: true };\n       break;\n    case 'targetX':\n        if (tray.controlState.value == 0) tray.targetX.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: true };\n       break;\n    case 'targetY':\n        if (tray.controlState.value == 0) tray.targetY.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: true };\n       break;\n    case 'calStepSize':\n        if (tray.controlState.value == 0) tray.calStepSize.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: true };\n       break;\n    case 'feedbackGain':\n        if (tray.controlState.value == 0) tray.feedbackGain.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: true };\n       break;\n    case 'controlState':\n        tray.controlState.value = msg.payload.value;\n        normalSettingMsg = { topic: 'newData', payload: true };\n        customSettingMsg = { topic: 'controlState', payload: msg.payload.value }\n       break;\n    case 'trayControl':\n        if (tray.controlState.value == 0)\n        {\n            switch(msg.payload.value)\n            {\n                case 0:\n                    tray.trayControl.value = 0;\n                    break;\n                case 1:\n                    tray.trayControl.value = -1;\n                    break;\n                case 2:\n                    if (tray.trayControl.value > 0)\n                    {\n                        tray.trayControl.value = 2;\n                        let trayProps  = flow.get('trayProps');\n                        node.warn(\"Asking for tray from database\");\n                        trayControlMessage =\n                        {\n                            topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/echo',\n                            payload: JSON.stringify({ topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/setting/echo' })\n                        };\n                    }\n                    break;\n                default:\n                    tray.trayControl.value = 0;\n                    break;\n            }\n        }\n        normalSettingMsg = { topic: 'newData', payload: true };\n       break;\n    default:\n        break;\n}\nflow.set('settingInProgress', false);\nreturn [customSettingMsg,normalSettingMsg,trayControlMessage];\n\n",
        "outputs": 3,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 240,
        "wires": [
            [
                "8ae00ce2e8187ccd"
            ],
            [
                "71df6ca08438be25"
            ],
            [
                "6c29d83d29cb0f0b"
            ]
        ]
    },
    {
        "id": "461b2f08f5e4f4ba",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Request tray from Database",
        "func": "let tray = flow.get('tray');\nif (tray != null) return [null,null];\nlet trayProps  = flow.get('trayProps');\nnode.warn(\"Asking for tray from database\");\nvar newMsg =\n{\n    topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/echo',\n    payload: JSON.stringify({ topic: trayProps.box + '/tray/' + trayProps.type + '/' + trayProps.name + '/setting/echo' })\n};\nreturn [{ topic: \"getTrayProps\", payload: true }, newMsg];  \n",
        "outputs": 2,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 860,
        "y": 100,
        "wires": [
            [
                "a91ceff75d960313"
            ],
            [
                "961510dc1e7a036a"
            ]
        ]
    },
    {
        "id": "a91ceff75d960313",
        "type": "delay",
        "z": "7cbe116050851432",
        "name": "",
        "pauseType": "delay",
        "timeout": "30",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 1100,
        "y": 100,
        "wires": [
            [
                "0d7a971d3b3d078d"
            ]
        ]
    },
    {
        "id": "0d7a971d3b3d078d",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "check for tray defined out",
        "mode": "link",
        "links": [
            "226356ea922f47c6"
        ],
        "x": 1205,
        "y": 40,
        "wires": []
    },
    {
        "id": "226356ea922f47c6",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "check for tray defined in",
        "links": [
            "0d7a971d3b3d078d"
        ],
        "x": 725,
        "y": 40,
        "wires": [
            [
                "461b2f08f5e4f4ba"
            ]
        ]
    },
    {
        "id": "81831015c91a5f28",
        "type": "mqtt out",
        "z": "7cbe116050851432",
        "name": "Publish Readings",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 1710,
        "y": 300,
        "wires": []
    },
    {
        "id": "aeb11c4b0eca0c4a",
        "type": "mqtt in",
        "z": "7cbe116050851432",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "nl": false,
        "rap": false,
        "inputs": 1,
        "x": 150,
        "y": 300,
        "wires": [
            [
                "b15d260b572e07f4"
            ]
        ]
    },
    {
        "id": "5de5dfce91a29ad6",
        "type": "mqtt out",
        "z": "7cbe116050851432",
        "name": "Publish Archive",
        "topic": "",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "79250bf3.365cc4",
        "x": 780,
        "y": 500,
        "wires": []
    },
    {
        "id": "8ae00ce2e8187ccd",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "Create Setting out",
        "mode": "link",
        "links": [
            "80fcd16594d8320d",
            "ed6c9a2fb45d587c"
        ],
        "x": 1055,
        "y": 200,
        "wires": []
    },
    {
        "id": "6c29d83d29cb0f0b",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "trayControl Out",
        "mode": "link",
        "links": [
            "f5153c8898e1a608"
        ],
        "x": 1055,
        "y": 280,
        "wires": []
    },
    {
        "id": "f5153c8898e1a608",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "trayControl In",
        "links": [
            "6c29d83d29cb0f0b",
            "961510dc1e7a036a",
            "a0cb5d23fc7d3b6c",
            "e9fb1e1eb1cf28cb",
            "0a753b3142f5cead",
            "6d52173ebdf69054",
            "f0688054698b62a7"
        ],
        "x": 1505,
        "y": 240,
        "wires": [
            [
                "81831015c91a5f28"
            ]
        ]
    },
    {
        "id": "e90864c178e3c08e",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "Publish Tray In",
        "links": [
            "bd59ed153526b94a",
            "71df6ca08438be25",
            "8f466a48843f0a7f",
            "bd491678f8e24259",
            "974629da19a525ea",
            "825424632004f63e",
            "4d89138bda7d06d8",
            "07f247bbf7e45fa2",
            "88eea90c968f199c"
        ],
        "x": 1155,
        "y": 300,
        "wires": [
            [
                "a64d31f1f50e0f29"
            ]
        ]
    },
    {
        "id": "71df6ca08438be25",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "create normal setting out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e"
        ],
        "x": 1055,
        "y": 240,
        "wires": []
    },
    {
        "id": "8f466a48843f0a7f",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "save config out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e"
        ],
        "x": 1055,
        "y": 360,
        "wires": []
    },
    {
        "id": "bd491678f8e24259",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "ping out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e"
        ],
        "x": 1055,
        "y": 320,
        "wires": []
    },
    {
        "id": "4cedc086c72eda01",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "prep ping",
        "func": "return {topic:'newData', payload:true};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 820,
        "y": 320,
        "wires": [
            [
                "bd491678f8e24259"
            ]
        ]
    },
    {
        "id": "e6028ca70b6042d8",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "save tray config out",
        "mode": "link",
        "links": [
            "21ead1f81b53e80b",
            "037f791cb0a6573d",
            "2e966dc43c0c40d2"
        ],
        "x": 1055,
        "y": 400,
        "wires": []
    },
    {
        "id": "21ead1f81b53e80b",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "setting switch in",
        "links": [
            "e6028ca70b6042d8"
        ],
        "x": 585,
        "y": 380,
        "wires": [
            [
                "ffa001cd11b3750b"
            ]
        ]
    },
    {
        "id": "961510dc1e7a036a",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "reload trays out",
        "mode": "link",
        "links": [
            "f5153c8898e1a608"
        ],
        "x": 1045,
        "y": 160,
        "wires": []
    },
    {
        "id": "a1ac9e631b1c38ed",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "MQTT subscribe topic",
        "func": "let subscribeTopic = flow.get('trayProps').box + \"/tray/\" + flow.get('trayProps').type +'/' + flow.get('trayProps').name + \"/setting/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 160,
        "y": 240,
        "wires": [
            [
                "aeb11c4b0eca0c4a"
            ]
        ]
    },
    {
        "id": "4d6715a3cd96c25c",
        "type": "delay",
        "z": "7cbe116050851432",
        "name": "",
        "pauseType": "delay",
        "timeout": "2",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 100,
        "wires": [
            [
                "461b2f08f5e4f4ba"
            ]
        ]
    },
    {
        "id": "c765b1192ff1e0c3",
        "type": "json",
        "z": "7cbe116050851432",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 590,
        "y": 680,
        "wires": [
            [
                "1f814bb176ad84b8"
            ]
        ]
    },
    {
        "id": "ca2b224146c4e50b",
        "type": "mqtt in",
        "z": "7cbe116050851432",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "nl": false,
        "rap": false,
        "inputs": 1,
        "x": 430,
        "y": 680,
        "wires": [
            [
                "c765b1192ff1e0c3"
            ]
        ]
    },
    {
        "id": "8811f418a681dd60",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Subscribe picameraMQTT",
        "func": "let subscribeTopic = flow.get('trayProps').box + \"/tray/\" + flow.get('tray').picameraMQTT.value + \"/reading/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 680,
        "wires": [
            [
                "ca2b224146c4e50b"
            ]
        ]
    },
    {
        "id": "037f791cb0a6573d",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "subscribe picameraMQTT in",
        "links": [
            "e6028ca70b6042d8"
        ],
        "x": 65,
        "y": 680,
        "wires": [
            [
                "8811f418a681dd60"
            ]
        ]
    },
    {
        "id": "1f814bb176ad84b8",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Save piCamera Tray",
        "func": "let picameraTray = msg.payload;\nflow.set('picameraTray',msg.payload);\n\nlet tray = flow.get('tray');\ntray.watchdog.value = tray.watchdog.value + 1;\nif (tray.watchdog.value > 32765) tray.watchdog.value = 0;\ntray.timeStamp = new Date();\nif (picameraTray.intensity.value > picameraTray.minIntensity.value)\n{\n    tray.errorX.value = Math.round(100 * (picameraTray.posX.value - tray.targetX.value)) / 100;\n    tray.errorY.value = Math.round(100 * (picameraTray.posY.value - tray.targetY.value)) / 100;\n}\nif (tray.controlState.value == 0) return [{topic:'newData', payload:true},null];\nif (tray.controlState.value != 1) return [null,null];\nlet rawMpos0 = -(tray.calMatrix.value[0][0] * tray.errorX.value + tray.calMatrix.value[0][1] * tray.errorY.value) *  tray.feedbackGain.value;\nlet rawMpos1 = -(tray.calMatrix.value[1][0] * tray.errorX.value + tray.calMatrix.value[1][1] * tray.errorY.value) *  tray.feedbackGain.value;\nlet mpos0 = Math.round(rawMpos0);\nlet mpos1 = Math.round(rawMpos1);\nlet mupos0 = Math.round(Math.round((rawMpos0 - mpos0) * 4) * 64);\nlet mupos1 = Math.round(Math.round((rawMpos1 - mpos1) * 4) * 64);\nlet motor0stepSet = \n{\n    topic:flow.get('trayProps').box + \"/tray/\" + tray.motorMQTT.value + \"/setting/setting\",\n    payload:{cube: 'mpos0', value: mpos0}\n};\nlet motor0UstepSet = \n{\n    topic:flow.get('trayProps').box + \"/tray/\" + tray.motorMQTT.value + \"/setting/setting\",\n    payload:{cube: 'mupos0', value: mupos0}\n};\nlet motor1stepSet = \n{\n    topic:flow.get('trayProps').box + \"/tray/\" + tray.motorMQTT.value + \"/setting/setting\",\n    payload:{cube: 'mpos1', value: mpos1}\n};\nlet motor1UstepSet = \n{\n    topic:flow.get('trayProps').box + \"/tray/\" + tray.motorMQTT.value + \"/setting/setting\",\n    payload:{cube: 'mupos1', value: mupos1}\n};\nlet movr0 = \n{\n    topic:flow.get('trayProps').box + \"/tray/\" + tray.motorMQTT.value + \"/setting/setting\",\n    payload:{cube: 'movr0', value: 1}\n};\nlet movr1 = \n{\n    topic:flow.get('trayProps').box + \"/tray/\" + tray.motorMQTT.value + \"/setting/setting\",\n    payload:{cube: 'movr1', value: 1}\n};\n\n\nreturn [{topic:'newData', payload:true}, {topic:'motorStep',payload:[motor0stepSet, motor0UstepSet, motor1stepSet, motor1UstepSet, movr0, movr1],rate:200}];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 680,
        "wires": [
            [
                "88eea90c968f199c"
            ],
            [
                "a0a3d2ec871d01b9"
            ]
        ]
    },
    {
        "id": "5f9b60f0a9483b14",
        "type": "json",
        "z": "7cbe116050851432",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 590,
        "y": 760,
        "wires": [
            [
                "b0398123a09361d6"
            ]
        ]
    },
    {
        "id": "c2ebb29752ed6e1d",
        "type": "mqtt in",
        "z": "7cbe116050851432",
        "name": "Subscribe Settings",
        "topic": "",
        "qos": "0",
        "datatype": "auto",
        "broker": "79250bf3.365cc4",
        "nl": false,
        "rap": false,
        "inputs": 1,
        "x": 430,
        "y": 760,
        "wires": [
            [
                "5f9b60f0a9483b14"
            ]
        ]
    },
    {
        "id": "c8ed5e500a01c79c",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Subscribe motorMQTT",
        "func": "let subscribeTopic = flow.get('trayProps').box + \"/tray/\" + flow.get('tray').motorMQTT.value + \"/reading/#\";\nreturn {action:\"subscribe\",topic:subscribeTopic};",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 760,
        "wires": [
            [
                "c2ebb29752ed6e1d"
            ]
        ]
    },
    {
        "id": "2e966dc43c0c40d2",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "subscribe motorMQTT in",
        "links": [
            "e6028ca70b6042d8"
        ],
        "x": 65,
        "y": 760,
        "wires": [
            [
                "c8ed5e500a01c79c"
            ]
        ]
    },
    {
        "id": "b0398123a09361d6",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Save motor Tray",
        "func": "flow.set('motorTray',msg.payload);\nreturn null;",
        "outputs": 0,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 760,
        "wires": []
    },
    {
        "id": "ed6c9a2fb45d587c",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "controlState in ",
        "links": [
            "8ae00ce2e8187ccd"
        ],
        "x": 85,
        "y": 1120,
        "wires": [
            [
                "e03dbed8a7323044"
            ]
        ]
    },
    {
        "id": "e03dbed8a7323044",
        "type": "switch",
        "z": "7cbe116050851432",
        "name": "controlState",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "1",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "2",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "3",
                "vt": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 4,
        "x": 220,
        "y": 1120,
        "wires": [
            [],
            [],
            [
                "315252e04585260f"
            ],
            [
                "bc0dab648c353466"
            ]
        ]
    },
    {
        "id": "e637ced479618067",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "setInit Pos",
        "func": "let tray = flow.get('tray');\nif (tray.controlState.value != 2) return [null,null,null]\n\nlet picameraTray = flow.get('picameraTray');\nif (picameraTray == null) return [msg,null,null];\nif (picameraTray.timeStamp < msg.payload) return [msg,null,null];\nif (picameraTray.intensity.value < picameraTray.minIntensity.value) return [msg,null,null];\nflow.set('calInitPos',JSON.parse(JSON.stringify(picameraTray)))\n\nlet movr0 = \n{\n    topic:flow.get('trayProps').box + \"/tray/\" + tray.motorMQTT.value + \"/setting/setting\",\n    payload:{cube: 'movr0', value: 1}\n};\n\nreturn [null,movr0,{topic:'setPos0',payload:((new Date().getTime()) + 10000)}];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 570,
        "y": 1220,
        "wires": [
            [
                "61708994d4bf440f"
            ],
            [
                "e9fb1e1eb1cf28cb"
            ],
            [
                "a1273aa51a5bb442"
            ]
        ]
    },
    {
        "id": "14c5f140d43927d9",
        "type": "delay",
        "z": "7cbe116050851432",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 1080,
        "wires": [
            [
                "fddf76ccccf1bf69"
            ]
        ]
    },
    {
        "id": "dfcadd275cbda974",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "Cal State in",
        "links": [
            "fddf76ccccf1bf69"
        ],
        "x": 415,
        "y": 1080,
        "wires": [
            [
                "315252e04585260f"
            ]
        ]
    },
    {
        "id": "fddf76ccccf1bf69",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "set init time out",
        "mode": "link",
        "links": [
            "dfcadd275cbda974"
        ],
        "x": 1005,
        "y": 1080,
        "wires": []
    },
    {
        "id": "315252e04585260f",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "setMotorStepSize",
        "func": "let tray = flow.get('tray');\nif (tray.controlState.value != 2) return [null,null,null]\n\nlet motorTray = flow.get('motorTray');\nif (motorTray == null) return [msg,null,null];\n\nlet motor0stepSet = \n{\n    topic:flow.get('trayProps').box + \"/tray/\" + flow.get('tray').motorMQTT.value + \"/setting/setting\",\n    payload:{cube: 'mpos0', value: tray.calStepSize.value}\n};\nlet motor1stepSet = \n{\n    topic:flow.get('trayProps').box + \"/tray/\" + flow.get('tray').motorMQTT.value + \"/setting/setting\",\n    payload:{cube: 'mpos1', value: tray.calStepSize.value}\n};\n\nreturn [null,{topic:'motorStep',payload:[motor0stepSet, motor1stepSet]}, {topic:'setInitPos',payload:((new Date().getTime()) + 1000)}];",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 1100,
        "wires": [
            [
                "14c5f140d43927d9"
            ],
            [
                "4d7618c12aa2a9b6"
            ],
            [
                "e637ced479618067"
            ]
        ]
    },
    {
        "id": "4d7618c12aa2a9b6",
        "type": "split",
        "z": "7cbe116050851432",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1120,
        "wires": [
            [
                "45f90be8da147d43"
            ]
        ]
    },
    {
        "id": "0f6e690f6a5cc513",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "shift",
        "func": "return msg.payload;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1120,
        "wires": [
            [
                "a0cb5d23fc7d3b6c"
            ]
        ]
    },
    {
        "id": "a0cb5d23fc7d3b6c",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "motor step out",
        "mode": "link",
        "links": [
            "f5153c8898e1a608"
        ],
        "x": 1135,
        "y": 1120,
        "wires": []
    },
    {
        "id": "a1273aa51a5bb442",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "setPos0",
        "func": "let tray = flow.get('tray');\nif (tray.controlState.value != 2) return [null,null,null]\n\nlet picameraTray = flow.get('picameraTray');\nif (picameraTray.timeStamp < msg.payload) return [msg,null,null];\nif (picameraTray.intensity.value < picameraTray.minIntensity.value) return [msg,null,null];\nflow.set('calPos0',JSON.parse(JSON.stringify(picameraTray)))\n\nlet movr0 = \n{\n    topic:flow.get('trayProps').box + \"/tray/\" + tray.motorMQTT.value + \"/setting/setting\",\n    payload:{cube: 'movr0', value: -1}\n};\nlet movr1 = \n{\n    topic:flow.get('trayProps').box + \"/tray/\" + tray.motorMQTT.value + \"/setting/setting\",\n    payload:{cube: 'movr1', value: 1}\n};\n\nreturn [null,{topic:'motorStep',payload:[movr0, movr1]},{topic:'setPos1',payload:(new Date().getTime() + 10000)}];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1340,
        "wires": [
            [
                "8fd15bc1094f43ce"
            ],
            [
                "be079b32df74acee"
            ],
            [
                "023f1ea69a2b140c"
            ]
        ]
    },
    {
        "id": "61708994d4bf440f",
        "type": "delay",
        "z": "7cbe116050851432",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 1200,
        "wires": [
            [
                "0d57cc8421c9fdbc"
            ]
        ]
    },
    {
        "id": "0d57cc8421c9fdbc",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "set init time out",
        "mode": "link",
        "links": [
            "fa928b15399eed6a"
        ],
        "x": 1005,
        "y": 1200,
        "wires": []
    },
    {
        "id": "fa928b15399eed6a",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "Cal State in",
        "links": [
            "0d57cc8421c9fdbc"
        ],
        "x": 415,
        "y": 1200,
        "wires": [
            [
                "e637ced479618067"
            ]
        ]
    },
    {
        "id": "e9fb1e1eb1cf28cb",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "motor step out",
        "mode": "link",
        "links": [
            "f5153c8898e1a608"
        ],
        "x": 1005,
        "y": 1240,
        "wires": []
    },
    {
        "id": "8fd15bc1094f43ce",
        "type": "delay",
        "z": "7cbe116050851432",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 1320,
        "wires": [
            [
                "46366dfdbc8de237"
            ]
        ]
    },
    {
        "id": "46366dfdbc8de237",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "set init time out",
        "mode": "link",
        "links": [
            "f2112dd16267f59d"
        ],
        "x": 1005,
        "y": 1320,
        "wires": []
    },
    {
        "id": "f2112dd16267f59d",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "Cal State in",
        "links": [
            "46366dfdbc8de237"
        ],
        "x": 415,
        "y": 1320,
        "wires": [
            [
                "a1273aa51a5bb442"
            ]
        ]
    },
    {
        "id": "0a753b3142f5cead",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "motor step out",
        "mode": "link",
        "links": [
            "f5153c8898e1a608"
        ],
        "x": 1155,
        "y": 1360,
        "wires": []
    },
    {
        "id": "45f90be8da147d43",
        "type": "delay",
        "z": "7cbe116050851432",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 910,
        "y": 1120,
        "wires": [
            [
                "0f6e690f6a5cc513"
            ]
        ]
    },
    {
        "id": "c8670d2a5694fa57",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "shift",
        "func": "return msg.payload;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1050,
        "y": 1360,
        "wires": [
            [
                "0a753b3142f5cead"
            ]
        ]
    },
    {
        "id": "be079b32df74acee",
        "type": "split",
        "z": "7cbe116050851432",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 770,
        "y": 1360,
        "wires": [
            [
                "09e8e89cfe195e0d"
            ]
        ]
    },
    {
        "id": "09e8e89cfe195e0d",
        "type": "delay",
        "z": "7cbe116050851432",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 910,
        "y": 1360,
        "wires": [
            [
                "c8670d2a5694fa57"
            ]
        ]
    },
    {
        "id": "023f1ea69a2b140c",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "setPos1",
        "func": "let tray = flow.get('tray');\nif (tray.controlState.value != 2) return [null,null,null]\n\nlet picameraTray = flow.get('picameraTray');\nif (picameraTray.timeStamp < msg.payload) return [msg,null,null];\nif (picameraTray.intensity.value < picameraTray.minIntensity.value) return [msg,null,null];\nflow.set('calPos1',JSON.parse(JSON.stringify(picameraTray)))\n\nlet movr1 = \n{\n    topic:flow.get('trayProps').box + \"/tray/\" + tray.motorMQTT.value + \"/setting/setting\",\n    payload:{cube: 'movr1', value: -1}\n};\nreturn [null,movr1,{topic:'calcCal',payload:(new Date().getTime())}];\n",
        "outputs": 3,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 1460,
        "wires": [
            [
                "7e5910f6c8f9fed6"
            ],
            [
                "6d52173ebdf69054"
            ],
            [
                "81207c3456977c41"
            ]
        ]
    },
    {
        "id": "7e5910f6c8f9fed6",
        "type": "delay",
        "z": "7cbe116050851432",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 780,
        "y": 1440,
        "wires": [
            [
                "db6ca6ad1bac849a"
            ]
        ]
    },
    {
        "id": "db6ca6ad1bac849a",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "set init time out",
        "mode": "link",
        "links": [
            "5773b4107c722ebf"
        ],
        "x": 1005,
        "y": 1440,
        "wires": []
    },
    {
        "id": "5773b4107c722ebf",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "Cal State in",
        "links": [
            "db6ca6ad1bac849a"
        ],
        "x": 415,
        "y": 1440,
        "wires": [
            [
                "023f1ea69a2b140c"
            ]
        ]
    },
    {
        "id": "6d52173ebdf69054",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "motor step out",
        "mode": "link",
        "links": [
            "f5153c8898e1a608"
        ],
        "x": 1005,
        "y": 1500,
        "wires": []
    },
    {
        "id": "f1df411d83c21e74",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "calcCal",
        "func": "let tray = flow.get('tray');\nlet pI = flow.get('calInitPos');\nlet p0 = flow.get('calPos0');\nlet p1 = flow.get('calPos1');\nlet a = (p0.posX.value - pI.posX.value) / tray.calStepSize.value;\nlet b = (p1.posX.value - pI.posX.value) / tray.calStepSize.value;\nlet c = (p0.posY.value - pI.posY.value) / tray.calStepSize.value;\nlet d = (p1.posY.value - pI.posY.value) / tray.calStepSize.value;\n\nlet det = a * d - b * c;\ntray.calMatrix.value = [[d / det,-b / det],[-c / det,a / det]]\ntray.controlState.value = 0;\nreturn {topic:'newData', payload:true};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 1540,
        "wires": [
            [
                "4d89138bda7d06d8"
            ]
        ]
    },
    {
        "id": "81207c3456977c41",
        "type": "delay",
        "z": "7cbe116050851432",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 560,
        "y": 1540,
        "wires": [
            [
                "f1df411d83c21e74"
            ]
        ]
    },
    {
        "id": "4d89138bda7d06d8",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "create normal setting out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e"
        ],
        "x": 1005,
        "y": 1540,
        "wires": []
    },
    {
        "id": "325e82daf5d8334d",
        "type": "link in",
        "z": "7cbe116050851432",
        "name": "Cal State in",
        "links": [
            "101009c9b7e3a802"
        ],
        "x": 435,
        "y": 1700,
        "wires": [
            [
                "d1bfe4b541baf228"
            ]
        ]
    },
    {
        "id": "d1bfe4b541baf228",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "set New Target",
        "func": "let tray = flow.get('tray');\nif (tray.controlState.value != 3) return [null,null]\n\nlet picameraTray = flow.get('picameraTray');\nif (picameraTray == null) return [msg,null];\nif (picameraTray.timeStamp < msg.payload) return [msg,null];\nif (picameraTray.intensity.value < picameraTray.minIntensity.value) return [msg,null];\ntray.targetX.value = picameraTray.posX.value;\ntray.targetY.value = picameraTray.posY.value;\ntray.errorX.value = 0;\ntray.errorY.value = 0;\ntray.controlState.value = 0;\nreturn [null,{topic:'newData', payload:true}];",
        "outputs": 2,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 1720,
        "wires": [
            [
                "fa942ee9133df151"
            ],
            [
                "07f247bbf7e45fa2"
            ]
        ]
    },
    {
        "id": "fa942ee9133df151",
        "type": "delay",
        "z": "7cbe116050851432",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 800,
        "y": 1700,
        "wires": [
            [
                "101009c9b7e3a802"
            ]
        ]
    },
    {
        "id": "101009c9b7e3a802",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "set init time out",
        "mode": "link",
        "links": [
            "325e82daf5d8334d"
        ],
        "x": 1025,
        "y": 1700,
        "wires": []
    },
    {
        "id": "bc0dab648c353466",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Set time",
        "func": "return {topic:'now',payload:(new Date().getTime())};",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 580,
        "y": 1660,
        "wires": [
            [
                "d1bfe4b541baf228"
            ]
        ]
    },
    {
        "id": "07f247bbf7e45fa2",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "create normal setting out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e"
        ],
        "x": 1025,
        "y": 1760,
        "wires": []
    },
    {
        "id": "88eea90c968f199c",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "create normal setting out",
        "mode": "link",
        "links": [
            "e90864c178e3c08e"
        ],
        "x": 1025,
        "y": 680,
        "wires": []
    },
    {
        "id": "a0a3d2ec871d01b9",
        "type": "split",
        "z": "7cbe116050851432",
        "name": "",
        "splt": "\\n",
        "spltType": "str",
        "arraySplt": 1,
        "arraySpltType": "len",
        "stream": false,
        "addname": "",
        "x": 930,
        "y": 740,
        "wires": [
            [
                "70e3a6d08dfd7baa"
            ]
        ]
    },
    {
        "id": "70e3a6d08dfd7baa",
        "type": "delay",
        "z": "7cbe116050851432",
        "name": "",
        "pauseType": "rate",
        "timeout": "5",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": true,
        "outputs": 1,
        "x": 1070,
        "y": 740,
        "wires": [
            [
                "44cd2215b79df5a2"
            ]
        ]
    },
    {
        "id": "44cd2215b79df5a2",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "shift",
        "func": "return msg.payload;",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1210,
        "y": 740,
        "wires": [
            [
                "f0688054698b62a7"
            ]
        ]
    },
    {
        "id": "f0688054698b62a7",
        "type": "link out",
        "z": "7cbe116050851432",
        "name": "motor step out",
        "mode": "link",
        "links": [
            "f5153c8898e1a608"
        ],
        "x": 1295,
        "y": 740,
        "wires": []
    },
    {
        "id": "a64d31f1f50e0f29",
        "type": "function",
        "z": "7cbe116050851432",
        "name": "Readings Alarm Scan",
        "func": "var tray = flow.get('tray');\nvar alarmFlagReading = scalarAlarmScan(tray, 'reading');\nvar alarmFlagSetting = scalarAlarmScan(tray, 'setting');\nreturn msg;\n\nfunction getActionArray(tray, type, actionType)\n{\n    var actionArray = [];\n    var keys = Object.keys(tray);\n    for (var ii = 0; ii < keys.length; ++ii)\n    {\n        if (tray[keys[ii]].hasOwnProperty('type'))\n        {\n            if (tray[keys[ii]].type == type)\n            {\n                if (tray[keys[ii]].action == actionType)\n                {\n                    actionArray.push(tray[keys[ii]]);\n                }\n            }\n        }\n    }\n    return actionArray;\n}\nfunction scalarAlarmScan(tray, actionType)\n{\n    var alarmFlag = false;\n    var actionArray = getActionArray(tray, 'scalar', actionType);\n    if (actionArray.length > 0)\n    {\n        for (var ii = 0; ii < actionArray.length; ++ii)\n        {\n            let oldAlarmValue = actionArray[ii].alarm.value;\n            actionArray[ii].alarm.value = 0;\n            if (!isNaN(actionArray[ii].value))\n            {\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.low)  actionArray[ii].alarm.value = 1;\n                if (actionArray[ii].value <= actionArray[ii].alarm.limits.lolo) actionArray[ii].alarm.value = 3;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.high) actionArray[ii].alarm.value = 2;\n                if (actionArray[ii].value >= actionArray[ii].alarm.limits.hihi) actionArray[ii].alarm.value = 4;\n                if (actionArray[ii].alarm.value != oldAlarmValue) alarmFlag = true;\n            }\n        }\n    }\n    return alarmFlag;\n}\n",
        "outputs": 1,
        "timeout": "",
        "noerr": 0,
        "initialize": "// Code added here will be run once\n// whenever the node is started.\ncontext.set('lastAlarm', -1);",
        "finalize": "",
        "libs": [],
        "x": 1300,
        "y": 300,
        "wires": [
            [
                "719cafd457722095"
            ]
        ]
    }
]